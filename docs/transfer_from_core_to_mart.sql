
--Allow rights to the MART user to the table in CORE.
GRANT SELECT ON CORE.H_QUESTION TO MART;
GRANT SELECT ON CORE.H_ITEM TO MART;
GRANT SELECT ON CORE.H_QUIZ_ATTEMPT TO MART;
GRANT SELECT ON CORE.H_QUESTION_ATTEMPT TO MART;
GRANT SELECT ON CORE.H_QUESTION_ATTEMPT_STEP TO MART;
GRANT SELECT ON CORE.H_QUIZ TO MART;
GRANT SELECT ON CORE.S_QUESTION_INFO TO MART;
GRANT SELECT ON CORE.S_QUESTION_AUTHOR TO MART;
GRANT SELECT ON CORE.S_QUESTION_STATISTICS TO MART;
GRANT SELECT ON CORE.S_QUESTION_ATTEMPT_STEP_DATA TO MART;
GRANT SELECT ON CORE.L_QUESTION_QUESTION_ATT TO MART;
GRANT SELECT ON CORE.L_QUESTION_ITEM TO MART;
GRANT SELECT ON CORE.L_QUIZ_ATT_QUESTION_ATT TO MART;
GRANT SELECT ON CORE.L_QUES_ATT_QUES_ATT_STEP TO MART;
GRANT SELECT ON CORE.L_QUESTION_QUIZ TO MART;

--Delete all tables.
DROP TABLE H_Question;
DROP TABLE H_Item;
DROP TABLE H_Quiz_Attempt;
DROP TABLE H_Question_Attempt;
DROP TABLE H_Question_Attempt_Step;
DROP TABLE H_Quiz;
DROP TABLE S_Question_Info;
DROP TABLE S_Question_Author;
DROP TABLE S_Question_Statistics;
DROP TABLE S_Question_Attempt_Step_Data;
DROP TABLE L_Question_Question_Att;
DROP TABLE L_Question_Item;
DROP TABLE L_Quiz_Att_Question_Att;
DROP TABLE L_Ques_Att_Ques_Att_Step;
DROP TABLE L_Question_Quiz;

--Generate MART tables
CREATE TABLE H_Question (question_id NUMBER NOT NULL, sourcesystem VARCHAR2(255) NOT NULL, moodle_key NUMBER NOT NULL, authorizedusers VARCHAR2(32672 BYTE));
CREATE TABLE H_Item (item_id NUMBER NOT NULL, sourcesystem VARCHAR2(255), moodle_key NUMBER NOT NULL, authorizedusers VARCHAR2(32672 BYTE));
CREATE TABLE H_Quiz_Attempt (quiz_attempt_id NUMBER NOT NULL, sourcesystem VARCHAR2(255) NOT NULL, quiz_attempt_user_hash VARCHAR2(255) NOT NULL, moodle_key NUMBER NOT NULL, authorizedusers VARCHAR2(32672 BYTE));
CREATE TABLE H_Question_Attempt (question_attempt_id NUMBER NOT NULL, sourcesystem VARCHAR2(255) NOT NULL, moodle_key NUMBER NOT NULL, authorizedusers VARCHAR2(32672 BYTE));
CREATE TABLE H_Question_Attempt_Step (question_attempt_step_id NUMBER NOT NULL, sourcesystem VARCHAR2(255), moodle_key NUMBER NOT NULL, createdunixtime NUMBER, createdtimestamp VARCHAR2(20), authorizedusers VARCHAR2(32672 BYTE));
CREATE TABLE H_Quiz (quiz_id NUMBER NOT NULL, sourcesystem VARCHAR2(255) NOT NULL, moodle_key NUMBER NOT NULL, authorizedusers VARCHAR2(32672 BYTE));

CREATE TABLE S_Question_Info (question_id NUMBER NOT NULL, sourcesystem VARCHAR2(255) NOT NULL, question_name VARCHAR2(255) NOT NULL, question_text CLOB NOT NULL, version_id NUMBER NOT NULL, authorizedusers VARCHAR2(32672 BYTE));
CREATE TABLE S_Question_Author (question_id NUMBER NOT NULL, sourcesystem VARCHAR2(255) NOT NULL, question_author_hash VARCHAR2(255) NOT NULL, version_id NUMBER NOT NULL, authorizedusers VARCHAR2(32672 BYTE));
CREATE TABLE S_Question_Statistics (question_id NUMBER NOT NULL, sourcesystem VARCHAR2(255) NOT NULL, slot NUMBER, effectiveweight FLOAT, discriminationindex FLOAT, discriminativeefficiency FLOAT, sd FLOAT, facility FLOAT, randomguessscore FLOAT, authorizedusers VARCHAR2(32672 BYTE));
CREATE TABLE S_Question_Attempt_Step_Data (question_attempt_step_id NUMBER NOT NULL, sourcesystem VARCHAR2(255), name VARCHAR2(32) NOT NULL, value CLOB NOT NULL, authorizedusers VARCHAR2(32672 BYTE));

CREATE TABLE L_Question_Question_Att (question_id NUMBER NOT NULL, question_attempt_id NUMBER NOT NULL, sourcesystem VARCHAR2(255) NOT NULL, value_from NUMBER, value_to NUMBER, authorizedusers VARCHAR2(32672 BYTE));
CREATE TABLE L_Question_Item (question_id NUMBER NOT NULL, item_id NUMBER NOT NULL, sourcesystem VARCHAR2(255) NOT NULL, value_from NUMBER, value_to NUMBER, authorizedusers VARCHAR2(32672 BYTE));
CREATE TABLE L_Quiz_Att_Question_Att (quiz_attempt_id NUMBER NOT NULL, question_attempt_id NUMBER NOT NULL, sourcesystem VARCHAR2(255), value_from NUMBER, value_to NUMBER, authorizedusers VARCHAR2(32672 BYTE));
CREATE TABLE L_Ques_Att_Ques_Att_Step (question_attempt_id NUMBER NOT NULL, question_attempt_step_id NUMBER NOT NULL, sourcesystem VARCHAR2(255), value_from NUMBER, value_to NUMBER, authorizedusers VARCHAR2(32672 BYTE));
CREATE TABLE L_Question_Quiz (question_id NUMBER NOT NULL, quiz_id NUMBER NOT NULL, sourcesystem VARCHAR2(255), value_from NUMBER, value_to NUMBER, authorizedusers VARCHAR2(32672 BYTE));


--Populate H_Question table

INSERT INTO H_Question
SELECT UNIQUE QUESTION_ID, SOURCESYSTEM, MOODLE_KEY, AUTHORIZEDUSERS
         FROM CORE.H_QUESTION
         WHERE NOT EXISTS (SELECT 1 FROM H_Question WHERE question_id = QUESTION_ID AND sourcesystem = SOURCESYSTEM);

--Populate H_Item table
INSERT INTO H_Item
SELECT UNIQUE ITEM_ID, SOURCESYSTEM, MOODLE_KEY, AUTHORIZEDUSERS
         FROM CORE.H_ITEM
        WHERE ITEM_ID IS NOT NULL -- There are questions that have no answers, like descriptions.
        AND NOT EXISTS (SELECT 1 FROM H_Item WHERE item_id = ITEM_ID AND sourcesystem = SOURCESYSTEM);

--Populate H_Quiz_Attempt table

INSERT INTO H_Quiz_Attempt
SELECT UNIQUE QUIZ_ATTEMPT_ID, SOURCESYSTEM, QUIZ_ATTEMPT_USER_HASH, MOODLE_KEY, AUTHORIZEDUSERS
         FROM CORE.H_QUIZ_ATTEMPT
         WHERE NOT EXISTS (SELECT 1 FROM H_Quiz_Attempt WHERE quiz_attempt_id = QUIZ_ATTEMPT_ID AND sourcesystem = SOURCESYSTEM);

--Populate H_Question_Attempt table

INSERT INTO H_Question_Attempt
SELECT UNIQUE QUESTION_ATTEMPT_ID, SOURCESYSTEM, MOODLE_KEY, AUTHORIZEDUSERS
         FROM CORE.H_QUESTION_ATTEMPT
         WHERE NOT EXISTS (SELECT 1 FROM H_Question_Attempt WHERE question_attempt_id = QUESTION_ATTEMPT_ID AND sourcesystem = SOURCESYSTEM);

--Populate H_Question_Attempt_Step table

INSERT INTO H_Question_Attempt_Step
SELECT UNIQUE QUESTION_ATTEMPT_STEP_ID, SOURCESYSTEM, MOODLE_KEY, CREATEDUNIXTIME, CREATEDTIMESTAMP, AUTHORIZEDUSERS
         FROM CORE.H_QUESTION_ATTEMPT_STEP
         WHERE NOT EXISTS (SELECT 1 FROM H_Question_Attempt_Step WHERE question_attempt_step_id = QUESTION_ATTEMPT_STEP_ID AND sourcesystem = SOURCESYSTEM);

--Populate H_Quiz table

INSERT INTO H_Quiz
SELECT UNIQUE QUIZ_ID, SOURCESYSTEM, MOODLE_KEY, AUTHORIZEDUSERS
         FROM CORE.H_QUIZ
         WHERE NOT EXISTS (SELECT 1 FROM H_Quiz WHERE quiz_id = QUIZ_ID AND sourcesystem = SOURCESYSTEM);

--Populate S_Question_Info table

INSERT INTO S_Question_Info
SELECT UNIQUE QUESTION_ID, SOURCESYSTEM, QUESTION_NAME, TO_CHAR(QUESTION_TEXT), VERSION_ID, AUTHORIZEDUSERS
         FROM CORE.S_QUESTION_INFO
         WHERE NOT EXISTS (SELECT 1 FROM S_Question_Info WHERE question_id = QUESTION_ID AND sourcesystem = SOURCESYSTEM);

--Populate S_Question_Author table

INSERT INTO S_Question_Author
SELECT UNIQUE QUESTION_ID, SOURCESYSTEM, QUESTION_AUTHOR_HASH, VERSION_ID, AUTHORIZEDUSERS
         FROM CORE.S_QUESTION_AUTHOR
         WHERE NOT EXISTS (SELECT 1 FROM S_Question_Author WHERE question_id = QUESTION_ID AND sourcesystem = SOURCESYSTEM);

--Populate S_Question_Statistics table

INSERT INTO S_Question_Statistics
SELECT UNIQUE QUESTION_ID, SOURCESYSTEM, SLOT, EFFECTIVEWEIGHT, DISCRIMINATIONINDEX, DISCRIMINATIVEEFFICIENCY, SD, FACILITY, RANDOMGUESSSCORE, AUTHORIZEDUSERS
         FROM CORE.S_QUESTION_STATISTICS
         WHERE NOT EXISTS (SELECT 1 FROM S_Question_Statistics WHERE question_id = QUESTION_ID AND sourcesystem = SOURCESYSTEM);

--Populate S_Question_Attempt_Step_Data table

INSERT INTO S_Question_Attempt_Step_Data
SELECT UNIQUE QUESTION_ATTEMPT_STEP_ID, SOURCESYSTEM, NAME, TO_CHAR(VALUE), AUTHORIZEDUSERS
         FROM CORE.S_QUESTION_ATTEMPT_STEP_DATA
        WHERE NAME IS NOT NULL AND VALUE IS NOT NULL
        AND NOT EXISTS (SELECT 1 FROM S_Question_Attempt_Step_Data WHERE question_attempt_step_id = QUESTION_ATTEMPT_STEP_ID AND sourcesystem = SOURCESYSTEM);

--Populate L_Question_Question_Att table

INSERT INTO L_Question_Question_Att
SELECT UNIQUE QUESTION_ID, QUESTION_ATTEMPT_ID, SOURCESYSTEM, VALUE_FROM, VALUE_TO, AUTHORIZEDUSERS
         FROM CORE.L_QUESTION_QUESTION_ATT
        WHERE NOT EXISTS (SELECT 1 FROM L_Question_Question_Att WHERE question_id = QUESTION_ID AND question_attempt_id = QUESTION_ATTEMPT_ID AND sourcesystem = SOURCESYSTEM);

--Populate L_Question_Item table

INSERT INTO L_Question_Item
SELECT UNIQUE QUESTION_ID, ITEM_ID, SOURCESYSTEM, VALUE_FROM, VALUE_TO, AUTHORIZEDUSERS
         FROM CORE.L_QUESTION_ITEM
        WHERE ITEM_ID IS NOT NULL -- There are questions that have no answers, like descriptions.
         AND NOT EXISTS (SELECT 1 FROM L_Question_Item WHERE question_id = QUESTION_ID AND item_id = ITEM_ID AND sourcesystem = SOURCESYSTEM);

--Populate L_Quiz_Att_Question_Att table

INSERT INTO L_Quiz_Att_Question_Att
SELECT UNIQUE QUIZ_ATTEMPT_ID, QUESTION_ATTEMPT_ID, SOURCESYSTEM, VALUE_FROM, VALUE_TO, AUTHORIZEDUSERS
         FROM CORE.L_QUIZ_ATT_QUESTION_ATT
         WHERE NOT EXISTS (SELECT 1 FROM L_Quiz_Att_Question_Att WHERE quiz_attempt_id = QUIZ_ATTEMPT_ID AND question_attempt_id = QUESTION_ATTEMPT_ID AND sourcesystem = SOURCESYSTEM);

--Populate L_Ques_Att_Ques_Att_Step table

INSERT INTO L_Ques_Att_Ques_Att_Step
SELECT UNIQUE QUESTION_ATTEMPT_ID, QUESTION_ATTEMPT_STEP_ID, SOURCESYSTEM, VALUE_FROM, VALUE_TO, AUTHORIZEDUSERS
         FROM CORE.L_QUES_ATT_QUES_ATT_STEP
         WHERE NOT EXISTS (SELECT 1 FROM L_Ques_Att_Ques_Att_Step WHERE question_attempt_id = QUESTION_ATTEMPT_ID AND question_attempt_step_id = QUESTION_ATTEMPT_STEP_ID AND sourcesystem = SOURCESYSTEM);

--Populate L_Question_Quiz table

INSERT INTO L_Question_Quiz
SELECT UNIQUE QUESTION_ID, QUIZ_ID, SOURCESYSTEM, VALUE_FROM, VALUE_TO, AUTHORIZEDUSERS
         FROM CORE.L_QUESTION_QUIZ
         WHERE NOT EXISTS (SELECT 1 FROM L_Question_Quiz WHERE question_id = QUESTION_ID AND quiz_id = QUIZ_ID AND sourcesystem = SOURCESYSTEM);

